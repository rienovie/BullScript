BullScript bullshitting

I want to create a language that is both squishy and firm.
I want it to be simple to learn in, but becomes more useful the more you know.
As you become a better programmer, it'll be with you every step of the way.

Everything is either a type or function.
All functions are within a type.
Functions declared outside of a type are considered part of the "global" type.
    ie if you have _someFunc() {} and you want to call it you can either write:
        someFunc() or global.someFunc()
    These are consider equivalent.
    entry() is also equivalent to global.entry()

Also I'm not sure if this is possible, but I want you to be able to write direct ASM functions if possible.
ie:
    _someASMFunc() -> int : ASM {
        ;asm code here
    }

Once I have a better understanding of ASM I'll revisit this idea.
Worst case I want to have at least a simplified ASM that would be the attribute bsASM

There is three levels to types:

    lvl 1: inferred (var)
        -automatically detect what the variable is
        -convert freely between each level
            bool -> int -> float -> list -> array
        -will mostly be used for beginners and templates

    lvl 2: resizing (int, float, etc)
        explaned below

    lvl 3: explict (i8, i16, i8u, i16u, etc)
        -only allocates exactly what is needed
        -strong type safety

Resizing types are made to be larger than the value itself.
Before modifing the value, checks at the location if there is a redirect to another memory spot.
Also if modifing the number would go out of bounds of the value:
    mark redirect
    copy to another memory location with the next size up
    mark previous with pointer to new
    then perform modify at new location
This is not the most efficient but should make it easy for quickly creating / beginners

All values are by reference
Maybe will have an attribute like "onlyCopy"

Values are defaulted to NULL
I think NULL will be defined as a specific memory location at program start
So anything pointing to that location is read to be NULL

If a function already exists it'll overwrite it as long as it's allowed

Using multiple files all of these are searched & added automatically:
    All .bs files in the BullScript install directory (basically the default stuffs)
    All .bs files in the directory of the entry BullScript
    All .bs files in all sub directories of the entry BullScript directory
    Files you wish to include in the program must be in a subdirectory (maybe will change?)

Will probably use extentions:
    .bs - basic bullScript extention
        all files can be this, but others simply structure
    .bsx (not required) - build / enforce / warn
        you could have say a linux.bsx, windows.bsx, mac.bsx, linux_debug.bsx, etc
    .bse (not required)- entry script
        I think this would make it easy to teach someone else to code in general. The entire file is considered the _entry() function and not having to worry about the build instructions and enforce and other things to distract from having the only thing the student sees is something like:
            int x = 5;
            return x;

Built-In Types:
    bool
    int
    float
    enum
    char
    string
    map
    list
    array
    queue
    dequeue
    stack
    type
    ptr
    fptr
    var //TODO describe how this will be used as templates
    null
