BullScript Brain Storming

I want to create a language that is both squishy and firm.
I want it to be simple to learn in, butbecomes more useful the more you know.
As you become a better programmer, it'll be with you every step of the way.

Everything is either a type or function.
Translation: Everything is either a value or a Method modifing a value.
All functions are within a type.

To define a function you use "_" followed by the input "()" and the defintion "{}"
    _someFunc() {}

To define a type, you use "~" followed by the input "[]" and the definition "{}"
    ~int[] {}

I'm not sure if I'll allow this but maybe have the options to either use the _ and ~ or use "function" and "type"

When using inputs with functions you use the "()" however when using inputs with types, i.e constructors, you use the "[]"
There will be multiple ways of setting values with types. Here are some examples:
    type with a int constructor/setter of 5 (all of these are valid)
        int someInt[5]; //This creates a variable of type int with a contructor intput of 5
        int someInt[] = 5; //This creates a variable of type int with empty constructor then calls setter with input of 5
        int someInt = 5; //This creates a variable of type int with empty constructor then calls setter with intput of 5

In this language, unlike in C you don't use [] to get a specific index for an array or string, you would use a function like ".at(index)"
It' more explict and allows for types to have different input brackets.

Functions declared outside of a type are considered part of the "global" type.
    ie if you have _someFunc() {} and you want to call it you can either write:
        someFunc() or global.someFunc()
    These are consider equivalent.
    entry() is also equivalent to global.entry()

Probably won't have direct ASM, but I want the entire language built ontop of BASM (Bull Assembly)
This will be a simplified ASM that down the line I want it to be able to compile to any 64bit ASM, i.e. BASM can compile to Intel, Arm, etc

I think there'll be multiple BullScript Basm function types. Something like:
    -Basm:
        -Prior to call, all main registers pushed onto stack
        -Input to function goes into "input" (currently r15)
        -Function call must have return
        -After function call, all main registers are poped from stack
        -Return value is placed in output register (current r8)
    -BasmRaw:
        -Will not modify the registers before and after calling this function
        -Is basically just a copy-paste into the Final Basm step in the compile process.
        -Dangerous but freedom baby.
    -BasmCore:
        -Function cannot be called except inside a Basm function
        -Has a special VAR instruction that'll create a global variable
        -When function is converted to Basm, will have it's name as fn_(nameOfFunc)

I think Basm would look like:

    // when a register is on the left, the MOV instruction is assumed
    // maybe should change that for clarity sake
    _someBasmFunc() -> int : Basm {
        sys     write
        arg1    stdout
        arg2    "Hello World!\n"
        arg3    arg2 -> fn_size        ;could also be fn_size<-arg2 or just the actual value
        arg3    arg2 >> fn_size        ;not sure if -> or >> maybe both will work?
        call

        return 0
    }

        Nasm equivalent:
            section .data
        v_a: db  "Hello World!", 10

            section .text
        fn_size:              ;this will be a built-in method
            mov r8, r15

            lbl_sizeNextChar:
            cmp byte [r8], 0
            je lbl_sizeFinish
            inc r8
            jmp lbl_sizeNextChar

            lbl_sizeFinish:
            sub r8, r15
            ret

        ;this is an autoname for funcs and doesn't need to be human readable
        f_a:
            mov rax, 1
            mov rdi, 1
            mov rsi, v_a

            mov r15, rsi
            call fn_size
            mov rdx, r8

            syscall
            mov r8, 0
            ret

    For NASM the standard naming is:
        fn_NAME     Basm external func, humanReadable, callable from any BASM func
        var_NAME    Basm external var, humanReadable, callable from any BASM func
        f_NAME      Basm internal func, not humanReadable, user should never see this
        v_NAME      Basm internal var, not humanReadable, user should never see this

    The internal funcs and vars will probably just be inputs and the functions from BullScript.


I also want extra features in Basm that'll make common things easier like:
        if arg2 > arg3, arg2->size->arg3
        else arg3->size->arg3

For the -> or >> all must go in a single direction.
i.e:
    arg1 -> size -> arg2    is valid and
    arg1 <- size <- arg2    is valid but
    size <- arg2 -> arg1    is NOT valid

For the main BullScript, there is three levels to types:

    lvl 1: inferred (var)
        -automatically detect what the variable is
        -convert freely between each level
            bool -> int -> float -> list -> array
        -will mostly be used for beginners and templates

    lvl 2: resizing (int, float, etc)
        explaned below

    lvl 3: explict (i8, i16, i8u, i16u, etc)
        -only allocates exactly what is needed
        -strong type safety

Resizing types are made to be larger than the value itself.
Before modifing the value, checks at the location if there is a redirect to another memory spot.
Also if modifing the number would go out of bounds of the value:
    mark redirect
    copy to another memory location with the next size up
    mark previous with pointer to new
    then perform modify at new location
This is not the most efficient but should make it easy for quickly creating / beginners

All values are by reference
Maybe will have an attribute like "onlyCopy"

Values are defaulted to NULL
I think NULL will be defined as a specific memory location at program start
So anything pointing to that location is read to be NULL

If a function already exists it'll overwrite it as long as it's allowed
i.e. if you have the function:
    _myFunc() { return 12; }
and later you write:
    _myFunc() { return 8; }
when you call myFunc() it will return 8 not 12
This won't give a build error, but maybe have built-in tooling that tells the user they are overwriting a previously defined function.

Using multiple files all of these are searched & added automatically:
    All .bs files in the BullScript install directory (basically the default stuff)
    All .bs files in the directory of the entry BullScript
    All .bs files in all sub directories of the entry BullScript directory
    Files you wish to include in the program must be in a subdirectory (maybe will change?)

Will probably use extentions:
    .bs - basic bullScript extention
        all files can be this, but others simplify structure
    .bsx (not required) - build / enforce / warn
        you could have say a linux.bsx, windows.bsx, mac.bsx, linux_debug.bsx, etc
    .bse (not required)- entry script
        I think this would make it easy to teach someone else to code in general.
        The entire file is considered the _entry() function and not having to worry about the build instructions or enforce and other things to distract from having the only thing the student sees is something like:
            var x = 5;
            return x;
        This is a valid program that would run and exit with code 5. This makes it really easy to explain concepts like variables etc to someone who has never seen code before without having the overwhelming thing that is what this same program would look like in c.
        I also think you can have a compile enforcement that assumes end of line is ;
        so you can make this a valid script:
            var x = 5
            return x

Built-In Types:
    bool
    int
    float
    enum
    char
    string
    map
    list
    array
    queue
    dequeue
    stack
    type
    ptr
    fptr
    var //TODO describe how this will be used as templates
    void
    null


The possible compile steps are:

1) populate all data/text
    -go thru all files and subdirectories
    -Convert all data into a map of an array of struct:
    (Array of struct because possible multiple definitions)
        -Type or Function
        -File
        -Line Numbers
        -Attributes
        -Full text (possibly just ref indexes of larger string)

2) define all compile funcs/types
    -go thru all data and fully define (all required funcs/types) each with attribute of "compile"

3) verify compile func/types
    -syntax and error checking

4) define build opts
    -Populate all flags/vars in the ##build section
    -error if missing required (i.e. executableName)

5) define Enforcement
    -Not sure exactly how this will work yet, but basically have functions that'll enforce things like:
        -not using resizing vars
        -banning specific functions / type
        -must use X at the start of variable names
        -function names cannot be longer than X
        -etc

6) Verify Enforcement
    -syntax and error checking

7) Enforcement
    The bees knees

8) Compile code into Basm
    -Most code should be built ontop of Basm but I'm not sure if this will be a seperate language or just tied into the main lang

9) Compile code into Nasm
    -Will all be in a single file, I don't want to have multiple files created to make it easier, however down the line I think for optimization reasons it's better to have them in multiple files so it doesn't have to recompile stuff that already has been

10) Compile into Executable

